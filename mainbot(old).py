import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile, URLInputFile, BufferedInputFile, CallbackQuery, ContentType, InputFile
import logging
import os
import tempfile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.command import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import sqlite3
import subprocess
import time
import hashlib
from io import BytesIO

from cnf import TOKEN
import buttons_bot as bb
import admin_buttons as ab

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class supports_tm(StatesGroup):
    supp_txt = State()
    number = State()
    adm_edit = State()
    wait_f = State()
    # count_btn = State()
    # names_btn = State()

async def main():
    await dp.start_polling(bot)

@dp.message(CommandStart())
async def start_msg(message: Message):
    if message.from_user.id == 745764314:
        await message.answer('''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!‚úã
–≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ãüíª: ''', reply_markup= await ab.admin_btns())
    else:
        await message.answer('''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!‚úã
–≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ãüíª: ''', reply_markup= await bb.btns())

@dp.message(Command('support'))
async def supp(message: Message):
    a = message.from_user.id
    if a == 745764314:
        await message.answer('''‚ùì–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CRM, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É''', reply_markup=ab.admin_btn)
    else:
        print(message.from_user.id)
        await message.answer('''‚ùì–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CRM, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É''', reply_markup=bb.support_btn2)

@dp.callback_query(F.data == 'back_admin')
async def supp(callback: CallbackQuery):
    a = callback.from_user.id
    if a == 745764314:
        await callback.message.edit_text('''‚ùì–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CRM, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É''', reply_markup=ab.admin_btn)
    else:
        print(callback.from_user.id)
        await callback.message.edit_text('''‚ùì–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CRM, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É''', reply_markup=bb.support_btn2)

@dp.callback_query(F.data == 'view')
async def view_supp(callback: CallbackQuery):
    db = sqlite3.connect('support_base_m2.db')
    cur = db.cursor()
    cur.execute('''SELECT id, idnp, tgname, number, text_supp, queue, status from supports''')
    admin_res = cur.fetchall()
    print(admin_res)
    if admin_res == []:
        await callback.message.edit_text('''‚ùóÔ∏è–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è  –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É''', reply_markup=ab.admin_reback_btn)
    # cur.execute('''SELECT idnp from supports''')
    # idnp_res = cur.fetchall()
    else:
        for i in admin_res:
            if i[6] == '—Ä–µ—à–∞–µ—Ç—Å—èüõ†':
                admin_work_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–û—Ç—Ä–∞–±–æ—Ç–∞–Ω', callback_data=f'accept:{i[0]}')]
            ])
                await callback.message.answer(f'''id: {i[1]}
üî§ –ù–∏–∫–Ω–µ–π–º: <u>{i[2]}</u>
üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[3]}
üì© –û–±—Ä–∞—â–µ–Ω–∏–µ: {i[4]}
üóÇ –û—á–µ—Ä–µ–¥—å: {i[5]}
üïê –°—Ç–∞—Ç—É—Å: {i[6]} ''', reply_markup=admin_work_btn, parse_mode="HTML")
            else:
                admin_worked_btn = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data=f'del:{i[0]}')]
                ])
                await callback.message.answer(f'''id: {i[1]}
üî§ –ù–∏–∫–Ω–µ–π–º: <u>{i[2]}</u>
üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[3]}
üì© –û–±—Ä–∞—â–µ–Ω–∏–µ: {i[4]}
üóÇ –û—á–µ—Ä–µ–¥—å: {i[5]}
üïê –°—Ç–∞—Ç—É—Å: {i[6]} ''', reply_markup=admin_worked_btn, parse_mode="HTML")
        
# @dp.callback_query(F.data == 'accept')
@dp.callback_query(F.data.startswith('accept:'))
async def process_callback_change_record(callback: CallbackQuery):
    record_id = str(callback.data.split(':')[1])
    print(record_id)
    admin_delete_btn = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data=f'del:{record_id}')]
     ])
    await acc_supp(record_id)
    await bot.answer_callback_query(callback.id)
    await callback.message.edit_text("üìù –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=admin_delete_btn)

async def acc_supp(record_id):
    db = sqlite3.connect('support_base_m2.db')
    cur = db.cursor()
    cur.execute(f'''SELECT queue from supports WHERE id == {record_id}''')
    queue_rec = cur.fetchone()
    nb = ' '.join(map(str, queue_rec))
    nnb = int(nb) - 1
    print(nnb)
    cur.execute('''UPDATE supports SET status = ? WHERE  id = ?''', ('–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ ‚úÖ', record_id))
    cur.execute('''UPDATE supports SET queue = queue - 1''')
    db.commit()
    db.close()

@dp.callback_query(F.data.startswith('del:'))
async def delete_rec(callback: CallbackQuery):
    record_id2 = str(callback.data.split(':')[1])
    print(record_id2)
    await delete_r(record_id2)
    await bot.answer_callback_query(callback.id)
    await callback.message.edit_text("üóë –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=ab.admin_reback_btn)

async def delete_r(record_id2):
    db = sqlite3.connect('support_base_m2.db')
    cur = db.cursor()
    cur.execute('''DELETE from supports WHERE id = ?''', (record_id2))
    cur.execute('''UPDATE supports SET queue = queue - 1 WHERE status = '—Ä–µ—à–∞–µ—Ç—Å—èüõ†' ''')
    db.commit()
    db.close()
# @dp.message(Command('support'))
# async def supp(message: Message):
#     await message.answer('''–í—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!
# –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º! 
# –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏, –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. 
# –° –≤–∞–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂—É—Ç—Å—è!
# –ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å –ª—É—á—à–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

# –§–ò–û
# –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è
                         
# –ü—Ä–∏–º–µ—Ä:
# –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
# –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç '–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞' ''', reply_markup= bb.support_btn)

@dp.callback_query(F.data == 'support2')
async def supp(callback: CallbackQuery):
    await callback.message.edit_text('''üë®‚Äçüîß –í—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º! 
–í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏, –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. 
–° –≤–∞–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂—É—Ç—Å—è!
–ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å –ª—É—á—à–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

üîπ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç '–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞' 
üîπ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞''', reply_markup= bb.support_btn)

@dp.callback_query(F.data == 'restart')
async def res_bt(callback: CallbackQuery):
    subprocess.Popen(['python3', '/Users/evgeniya/Desktop/PYTHON/botGPS/mainbot.py'])
    await bot.answer_callback_query(callback.id)
    await callback.message.edit_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ 3Ô∏è‚É£...")
    time.sleep(1)
    await callback.message.edit_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ 2Ô∏è‚É£...")
    time.sleep(1)
    await callback.message.edit_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ 1Ô∏è‚É£...")
    time.sleep(1)
    await callback.message.edit_text("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!", reply_markup=bb.backkk_btn)

@dp.callback_query(F.data == 'go')
async def supp_enter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(supports_tm.supp_txt)
    await callback.message.edit_text(f'{callback.from_user.full_name}, –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:')

@dp.message(supports_tm.supp_txt)
async def reg_supp(message: Message, state: FSMContext):
    await state.update_data(supp_txt=message.text)
    await state.set_state(supports_tm.number)
    await message.answer('''–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞''')

@dp.message(supports_tm.number)
async def reg_numb(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    db = sqlite3.connect('support_base_m2.db')
    cur = db.cursor()
    txt = await state.get_data()
    print(txt)
    cur.execute('''SELECT queue from supports ORDER BY ROWID DESC LIMIT 1''')
    queue = cur.fetchone()
    print(queue)
    if queue == None:
        que = '1'
    else:
        convert = " ".join(map(str, queue))
        que = int(convert) + 1
    cur.execute('''INSERT INTO supports (idnp, tgname, number, text_supp, queue) VALUES (?, ?, ?, ?, ?)''', [message.from_user.id,f'@{message.from_user.username}', txt['number'], txt['supp_txt'], que])
    cur.execute('''SELECT queue from supports ORDER BY ROWID DESC LIMIT 1''')
    res = cur.fetchone()
    await message.reply(f'''üìÑ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. 
üóÇ –û—á–µ—Ä–µ–¥—å: {' '.join(map(str, res))}''', reply_markup=bb.status_btn)
    state.clear()
    db.commit()
    db.close()

@dp.callback_query(F.data == 'status')
async def status(callback: CallbackQuery):
    db = sqlite3.connect('support_base_m2.db')
    cur = db.cursor()
    cur.execute(f'''SELECT tgname from supports WHERE idnp == {callback.from_user.id} ORDER BY ROWID DESC LIMIT 1''')
    name = cur.fetchone()
    cur.execute(f'''SELECT number from supports WHERE idnp == {callback.from_user.id} ORDER BY ROWID DESC LIMIT 1''')
    numb = cur.fetchone()
    cur.execute(f'''SELECT text_supp from supports WHERE idnp == {callback.from_user.id} ORDER BY ROWID DESC LIMIT 1''')
    txt_tg = cur.fetchone()
    cur.execute(f'''SELECT queue from supports WHERE idnp == {callback.from_user.id} ORDER BY ROWID DESC LIMIT 1''')
    qq = cur.fetchone()
    cur.execute(f'''SELECT status from supports WHERE idnp == {callback.from_user.id} ORDER BY ROWID DESC LIMIT 1''')
    st = cur.fetchone()
    if name == None:
        await callback.message.edit_text('''‚ùóÔ∏è–í—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–∏—Å–∞–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!
–õ–∏–±–æ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞''', reply_markup=bb.reback_btn)
    else:
        await callback.message.edit_text(f'''üî† –ù–∏–∫–Ω–µ–π–º: {name[0]} 
üìû –ù–æ–º–µ—Ä: {numb[0]}
üì® –û–±—Ä–∞—â–µ–Ω–∏–µ: {txt_tg[0]}
üóÇ –û—á–µ—Ä–µ–¥—å: {qq[0]}
üïê –°—Ç–∞—Ç—É—Å: {st[0]}''', reply_markup=bb.reback_btn)
    

@dp.callback_query(F.data == 'back')
async def menu_b(callback: CallbackQuery):
    if callback.from_user.id == 745764314:
        await callback.message.answer('''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!‚úã
–≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ãüíª: ''', reply_markup= await ab.admin_btns())
    else:
        await callback.message.answer('''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!‚úã
–≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ãüíª: ''', reply_markup= await bb.btns())
        
@dp.callback_query(F.data == 'edit')
async def admin_edit_file(callback: CallbackQuery, state: FSMContext):
    db = sqlite3.connect('support_base_m2.db')
    cur = db.cursor()
#     admin_edit_button = InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton(text='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data=f'reincarnation_{callback.message.document.file_id}_{callback.message.document.file_name}')],
#     [InlineKeyboardButton(text='–ó–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–∫–∞—Ö', callback_data='file')]
# ])
    # await state.set_state(supports_tm.adm_edit)
    await callback.message.edit_text(f'{callback.from_user.full_name}, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏: ', reply_markup=bb.backkk_btn)
    await state.set_state(supports_tm.wait_f)
    cur.execute('''DELETE from files''')
    db.commit()
    db.close()

@dp.callback_query(F.data == 'ctg1')
async def category_1(callback: CallbackQuery):
    await callback.message.reply_document(document=FSInputFile('/Users/evgeniya/Desktop/PYTHON/botGPS/TestDocs/instr_calc.pdf'), caption= '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞üë®‚Äçüíª: ''', reply_markup=bb.backkk_btn)

# @dp.callback_query(F.data == 'reincarnation')
# async def reinc(callback: CallbackQuery):
#     await callback.message.answer('''–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–°–ï —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –∫ –∫–Ω–æ–∫–∞–º: ''')

@dp.message(supports_tm.wait_f)
async def save_files(message: Message, state: FSMContext):
    db = sqlite3.connect('support_base_m2.db')
    cur = db.cursor()
    # cur.execute('''DELETE from files''')
    data = await state.get_data()
    files = data.get('files', [])
    send_save_message = data.get('send_save_message', False)
    if message.document:
        file_id = message.document.file_id
        hash_file = hashlib.md5(file_id.encode()).hexdigest()[:16]
        file_name = message.document.file_name
        print(hash_file, file_name)
        files.append((file_id, hash_file, file_name))
        cur.execute('''INSERT INTO files (file_id, hash_file_id, file_name) VALUES (?, ?, ?)''', (file_id, hash_file, file_name))
    await state.update_data(files=files, send_save_message=True)
    db.commit()
    db.close()

    if not send_save_message:
        admin_save_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f'sf')],
            [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='back')]
        ])
        await message.answer('''–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª(—ã)?''', reply_markup=admin_save_btn)
    # file_id = callback.message.document.file_id
    # file_name = callback.message.document.file_name
    # await save_file_db(file_id, file_name, callback.message.document.file_size)
@dp.callback_query(F.data.startswith('sf'))
async def save_file_db(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    files = data.get('files', [])
    print("–ì–µ—Ç–∫–∞", files)

    db = sqlite3.connect('support_base_m2.db')
    cur = db.cursor()
    # cur.execute('''SELECT file_id from files ''')
    # res_id = cur.fetchone()
    # cur.execute('''SELECT hash_file_id from files''')
    # res_hash = cur.fetchone()
    # print('—Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫–∑–µ–∫—É—Ç–∞',res_id, res_hash)
    # data = callback.data.split("_")
    # file_id = res_id[0]
    # hash_id = res_hash[0]
    # print("–ø–æ—Å–ª–µ —Ö–µ—à–µ—Ä–∞",file_id)
    # file_name = data[3]
    # print(file_id, file_name)
    for file_id, hash_id, file_name in files:
        file = await bot.get_file(file_id)
        f_data = await bot.download_file(file.file_path)
        bytes_f = f_data.getvalue()
        cur.execute(f'''UPDATE files SET file = ? WHERE  hash_file_id = ?''', (sqlite3.Binary(bytes_f), hash_id))
    
    # cur.execute('''SELECT hash_file_id from files''')
    # add_res_id = cur.fetchall()
    # cur.execute('''SELECT file_name from files''')
    # add_res_name = cur.fetchall()

    cur.execute('''SELECT hash_file_id, file_name from files''')
    res_all = cur.fetchall()
    print('''–ö–Ω–û–ø–ê—á–ö–∏''', res_all)
    # cur.execute('''SELECT hash_file_id from files''')
    # res_hashh = cur.fetchall()
    # for i in res_hashh:
    #     cur.execute('''DELETE from files WHERE hash_file_id != ?''', i[0])
    # print(f'''–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ 
    # —Ö—É–µ—Ç–∞ {add_res_id[0]}
    # —Ö—É–µ—Ç–∞ {add_res_id[1]}
    # —Ö—É–µ—Ç–µ–Ω—å{add_res_name[0]}''')

    # id_res = []
    # name_res = []
    # for idd in add_res_id:
    #     id_res.append(idd)
    # print('idd–∏—à–Ω–∞—è —Ö—É–µ—Ç–µ–Ω—å', id_res)
    # for nname in add_res_name:
    #     name_res.append(nname)
    # print('nn–µ–º–Ω–∞—è —Ö—É–µ—Ç–µ–Ω—å', add_res_name)

    async def markup():
        keyboard = InlineKeyboardBuilder()
        for fi, fn in res_all:
            keyboard.add(InlineKeyboardButton(text=fn, callback_data=f'files_dwn{fi}'))
        keyboard.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back'))
        return keyboard.adjust(1).as_markup()

    # async def markup():
    #     keyboard = InlineKeyboardBuilder()
    #     for fi in id_res:
    #         for fn in name_res:
    #             keyboard.add(InlineKeyboardButton(text=fn[0], callback_data=f'files_dwn{fi[0]}'))
    #     return keyboard.adjust(1).as_markup()  


    await callback.message.edit_text('''–í—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é!''', reply_markup=await markup())
    await state.clear()
    db.commit()
    db.close()



# @dp.callback_query(F.data == 'reincarnation')
# async def reinc(callback: CallbackQuery, state: FSMContext):
#     await state.set_state(supports_tm.count_btn)
#     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ –∫–Ω–æ–ø–æ–∫: ')

# @dp.message(supports_tm.count_btn)
# async def procces_btn_count(message: Message, state: FSMContext):
#     count = int(message.text)
#     await state.update_data(count_btn = count)
#     await message.answer('''–í–Ω–µ—Å–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –∫ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ''')
#     await state.set_state(supports_tm.names_btn)

# @dp.message(supports_tm.names_btn)
# async def procces_btn_names(message: Message, state: FSMContext):
#     btn_data = await state.get_data()
#     button_names = message.text.split(',')
#     ogran_btn = len(btn_data)
#     print(ogran_btn)

#     keyboard = InlineKeyboardBuilder()
#     for name in button_names[ogran_btn]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
#         keyboard.button(text=name.strip(), callback_data=name.strip())

#     await message.answer("–í–æ—Ç –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏:", reply_markup=keyboard)
#     await state.clear()


@dp.callback_query(F.data.startswith('files_dwn_'))
async def ff(callback: CallbackQuery, state: FSMContext):
    db = sqlite3.connect('support_base_m2.db')
    cur = db.cursor()
    file_idd = callback.data.split('_')[2]
    print(file_idd)
    cur.execute('''SELECT file, file_name from files WHERE hash_file_id = ?''', [file_idd])
    res_res = cur.fetchone()
    # print(d_file)

    if res_res:
        d_file, n_file = res_res
        # d_file = d_file.encode()
        # cur.execute('''UPDATE files SET file = ? WHERE hash_file_id = ?''', (sqlite3.Binary(d_file), file_idd))

        # file_io = BytesIO(d_file)
        # file_io.name = n_file
        with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(n_file)[1]) as temp_file:
            temp_file.write(d_file)
            temp_file_path = temp_file.name
            print('—Ç–µ–º–ø—É—à–∫–∞',temp_file_path)
        # file_data = BytesIO(d_file[0])
        await callback.message.reply_document(document=FSInputFile(temp_file_path), caption='–í–∞—à–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ', reply_markup=bb.backkk_btn)
        os.remove(temp_file_path)
    else:
        await callback.message.answer('''–¢–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!''', reply_markup=bb.backkk_btn)
# @dp.callback_query(F.data == 'set')
# async def d_one(callback: CallbackQuery):
#     await callback.message.reply_document(document=FSInputFile('TestDocs\webcalc.docx'), caption= '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤–µ–±-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞üë®‚Äçüíª: ''', reply_markup=bb.backkk_btn)

# @dp.callback_query(F.data == 'loc')
# async def d_one(callback: CallbackQuery):
#     await callback.message.reply_document(document=FSInputFile('TestDocs\loccalc.docx'), caption= '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞üë®‚Äçüíª: ''', reply_markup=bb.backkk_btn)

@dp.callback_query(F.data == 'ctg2')
async def category_1(callback: CallbackQuery):
    if callback.from_user.id == 745764314:
        pass
    else:
        await callback.message.answer('''üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é:''', reply_markup= bb.ctg2_btn)

@dp.callback_query(F.data == 'mech')
async def d_one(callback: CallbackQuery):
    await callback.message.reply_document(document=FSInputFile('/Users/evgeniya/Desktop/PYTHON/botGPS/TestDocs/mech.docx'), caption= '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä–∞üë®‚Äçüíª: ''', reply_markup=bb.backkk_btn)

@dp.callback_query(F.data == 'ai')
async def d_two(callback: CallbackQuery):
    await callback.message.reply_document(document=FSInputFile('/Users/evgeniya/Desktop/PYTHON/botGPS/TestDocs/ai.docx'), caption= '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ò–ò –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä–∞üë®‚Äçüíª: ''', reply_markup=bb.backkk_btn)

# @dp.callback_query(F.data == 'ctg3')
# async def category_1(callback: CallbackQuery):
#     await callback.message.answer('''–ö–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
# 89999999999 - –Ω–æ–º–µ—Ä –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–∏
# 89999999999 - –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
# @tgtgtgtgtg - —Ç–µ–ª–µ–≥—Ä–∞–º–º —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
# @gtgtgtgtgt - —Ç–µ–ª–µ–≥—Ä–∞–º–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞''',reply_markup=bb.backkk_btn)

# @dp.callback_query(F.data == 'Docs1')
# async def d_one(callback: CallbackQuery):
#     await callback.message.reply_document(document=FSInputFile('TestDocs/Docu1.docx'), caption= '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫ –ø–µ—Ä–≤–∏—á–Ω—ã–º –∑–∞–¥–∞—á–∞–º –∫–æ–º–ø–∞–Ω–∏–∏üë®‚Äçüíª: ''', reply_markup=bb.backkk_btn)

# @dp.callback_query(F.data == 'Docs2')
# async def d_two(callback: CallbackQuery):
#     await callback.message.reply_document(document=FSInputFile('TestDocs/Docu2.docx'), caption= '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫ –≤—Ç–æ—Ä–∏—á–Ω—ã–º –∑–∞–¥–∞—á–∞–º –∫–æ–º–ø–∞–Ω–∏–∏üë©‚Äçüíª: ''', reply_markup=bb.backkk_btn)

# @dp.callback_query(F.data == 'Docs3')
# async def d_three(callback: CallbackQuery):
#     await callback.message.reply_document(document=FSInputFile('TestDocs/Docu3.docx'), caption= '''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫ —Ç—Ä–µ—Ç–∏—á–Ω—ã–º –∑–∞–¥–∞—á–∞–º –∫–æ–º–ø–∞–Ω–∏–∏üë•: ''', reply_markup=bb.backkk_btn)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt or RuntimeError:
        print("Bot was disabled")